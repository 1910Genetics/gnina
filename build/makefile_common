
SRCD :=./../../../src
OBJD :=./objs
BUILTIN_VARS := $(.VARIABLES)

OPENBABEL_INCLUDE := /usr/local/include/openbabel-2.0
RDKIT_INCLUDE := /usr/include/rdkit
CAFFE_INCLUDE := ~/local/include
GNINA_INCLUDE := ~/git/
BOOST_INCLUDE := $(BASE)/include/boost
CUDA_INCLUDE := $(BASE)/cuda/include
INCFLAGS := -I $(BOOST_INCLUDE) \
			-I $(OPENBABEL_INCLUDE) \
			-I $(RDKIT_INCLUDE) \
			-I $(CUDA_INCLUDE) \
			-I $(SRCD)/lib \
			-I $(CAFFE_INCLUDE) \
			-I $(GNINA_INCLUDE)

CC := g++
CFLAGS += \
	   -std=c++11 \
	   -Wno-deprecated-declarations \
	   $(INCFLAGS) $(C_PLATFORM) $(C_OPTIONS)

NVCC := /usr/local/cuda-7.5/bin/nvcc
NVOPTS += \
	   -std=c++11 \
	   -gencode arch=compute_52,code=sm_52 \
	   $(INCFLAGS)

LDFLAGS := -L $(BASE)/lib \
		   -L . \
		   -L /usr/local/lib \
		   -L /home/josh/local/lib \
		   -L $(BASE)/cuda/lib64 \
		   $(LDFLAGS)
LIBS := -l openbabel \
	-l boost_iostreams${BOOST_LIB_VERSION} \
	-l boost_timer${BOOST_LIB_VERSION} \
	-lz \
	-l boost_system${BOOST_LIB_VERSION} \
	-l boost_regex${BOOST_LIB_VERSION} \
	-l boost_thread${BOOST_LIB_VERSION} \
	-l boost_serialization${BOOST_LIB_VERSION} \
	-l boost_filesystem${BOOST_LIB_VERSION} \
	-l boost_program_options${BOOST_LIB_VERSION} \
	-l boost_date_time${BOOST_LIB_VERSION} \
	-l FileParsers \
	-l SmilesParse \
	-l SubstructMatch \
	-l GraphMol \
	-l RDGeometryLib \
	-l RDGeneral \
	-l Subgraphs \
	-l DataStructs \
	-l Depictor \
	-l Subgraphs \
	-lcudart -lglog -lcaffe -lprotobuf

LIBSRC := $(wildcard $(SRCD)/lib/*.cpp)
MAINSRC := $(wildcard $(SRCD)/main/*.cpp)
TOGNINASRC := $(wildcard $(SRCD)/tognina/*.cpp $(SRCD)/lib/CommandLine2/*.cpp)
FROMGNINASRC := $(wildcard $(SRCD)/fromgnina/*.cpp)
GNINAVISSRC := $(wildcard $(SRCD)/gninavis/*.cpp)
GNINAGRIDSRC := $(wildcard $(SRCD)/gninagrid/*.cpp)
GNINATYPERSRC := $(wildcard $(SRCD)/gninatyper/*.cpp)
SERVERSRC := $(wildcard $(SRCD)/gninaserver/*.cpp $(SRCD)/lib/CommandLine2/*.cpp)
GPUSRC := $(wildcard $(SRCD)/lib/*.cu)

SRCS := $(LIBSRC) \
		$(MAINSRC) \
		$(TOGNINASRC) \
		$(FROMGNINASRC) \
		$(GNINAVISSRC) \
		$(GNINAGRIDSRC) \
		$(SERVERSRC) \
		$(GUPSRC)

LIBOBJ := $(LIBSRC:$(SRCD)/%.cpp=$(OBJD)/%.o)
MAINOBJ := $(MAINSRC:$(SRCD)/%.cpp=$(OBJD)/%.o)
TOGNINAOBJ := $(TOGNINASRC:$(SRCD)/%.cpp=$(OBJD)/%.o)
FROMGNINAOBJ := $(FROMGNINASRC:$(SRCD)/%.cpp=$(OBJD)/%.o)
GNINAVISOBJ := $(GNINAVISSRC:$(SRCD)/%.cpp=$(OBJD)/%.o)
GNINAGRIDOBJ := $(GNINAGRIDSRC:$(SRCD)/%.cpp=$(OBJD)/%.o)
GNINATYPEROBJ := $(GNINATYPERSRC:$(SRCD)/%.cpp=$(OBJD)/%.o)
SERVEROBJ := $(SERVERSRC:$(SRCD)/%.cpp=$(OBJD)/%.o)
GPUOBJ := $(GPUSRC:$(SRCD)/%.cu=$(OBJD)/%.o)

OBJS := $(LIBOBJ)  \
		$(MAINOBJ) \
		$(TOGNINAOBJ) \
		$(FROMGNINAOBJ) \
		$(GNINAVISOBJ) \
		$(GNINAGRIDOBJ) \
		$(SERVEROBJ) \
		$(GPUOBJ)
		
all: gnina tognina gninaserver libgnina.a gninagrid gninavis


$(OBJS): $(MAKEFILE_LIST)

$(OBJD)/%.o: $(SRCD)/%.cpp
	mkdir -p $(dir $(OBJD)/$*)
	$(CC) $(INCFLAGS) $(CFLAGS) -MM -MP -MT $(OBJD)/$*.o -MF $(OBJD)/$*.d $<
	$(CC) $(CFLAGS) -o $@ -c $<

$(OBJD)/%.o: $(SRCD)/%.cu
	mkdir -p $(dir $(OBJD)/$*)
	$(NVCC) $(INCFLAGS) -M -odir $(OBJD) -o $(OBJD)/$*.d $<
	$(NVCC) $(NVOPTS) -o $@ -dc $<

tags: $(SRCS) Makefile
	cd $(SRCD)
	ctags -R *
.PHONY : tags

-include $(OBJS:.o=.d)

device_code.o: $(GPUOBJ)
	$(NVCC) $(NVOPTS) -o $@ -dlink $^

gnina: $(MAINOBJ) $(LIBOBJ) $(GPUOBJ) device_code.o
	+ $(CC) $(CFLAGS) $(LDFLAGS) -o $@ $^ $(LIBS)

tognina: $(TOGNINAOBJ) $(LIBOBJ) $(GPUOBJ) device_code.o
	$(CC) $(LDFLAGS) -o $@ $^ $(LIBS)
	@echo "Done"

fromgnina: $(FROMGNINAOBJ) $(LIBOBJ) $(GPUOBJ) device_code.o
	$(CC) $(LDFLAGS) -o $@ $^ $(LIBS)
	@echo "Done"	

gninavis: $(GNINAVISOBJ) $(LIBOBJ) $(GPUOBJ) device_code.o
	$(CC) $(LDFLAGS) -o $@ $^ $(LIBS)
	@echo "Done"

gninagrid: $(GNINAGRIDOBJ) $(LIBOBJ) $(GPUOBJ) device_code.o
	$(CC) $(LDFLAGS) -o $@ $^ $(LIBS)
	@echo "Done"    	
	
gninatyper: $(GNINATYPEROBJ) $(LIBOBJ) $(GPUOBJ) device_code.o
	$(CC) $(LDFLAGS) -o $@ $^ $(LIBS)
	@echo "Done" 
	
gninaserver: $(SERVEROBJ) $(LIBOBJ) $(GPUOBJ) device_code.o
	$(CC) $(LDFLAGS) -o $@ $^ $(LIBS)
	@echo "Done"	

libgnina.a: $(LIBOBJ) $(GPUOBJ) device_code.o
	 ar rcs libgnina.a $^

clean:
	rm -rf *.o *.d objs
	rm -f gnina tognina fromgnina gninagrid gninatyper gninaserver gninavis libgnina.a
.PHONY : clean

define \n


endef
info::
	$(foreach v, \
		$(filter-out $(BUILTIN_VARS) BUILTIN_VARS \n, $(.VARIABLES)), \
		$(info $(v) = $($(v)) ${\n}))

